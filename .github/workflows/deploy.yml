name: Deploy to production

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      MIX_ENV: prod

    steps:
      - uses: actions/checkout@v3

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1.15.4
        id: elixir
        with:
          version-file: ".tool-versions"
          version-type: strict

      - name: Cache mix deps
        uses: actions/cache@v3
        env:
          cache-name: mix-deps-prod
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.elixir.outputs.otp-version }}-${{ steps.elixir.outputs.elixir-version }}-${{ env.cache-name }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock'))}}

      - name: Cache build
        uses: actions/cache@v3
        env:
          cache-name: mix-build-prod-v1
        with:
          path: _build
          key: ${{ runner.os }}-${{ steps.elixir.outputs.otp-version }}-${{ steps.elixir.outputs.elixir-version }}-${{ env.cache-name }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock'))}}

      - run: mix deps.get --only prod
      - run: mix deps.compile

  deploy:
    runs-on: ubuntu-22.04
    needs: build

    env:
      MIX_ENV: prod

    steps:
      - uses: actions/checkout@v3

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1.15.4
        id: elixir
        with:
          version-file: ".tool-versions"
          version-type: strict

      - name: Cache mix deps
        uses: actions/cache@v3
        env:
          cache-name: mix-deps-prod
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.elixir.outputs.otp-version }}-${{ steps.elixir.outputs.elixir-version }}-${{ env.cache-name }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock'))}}

      - name: Cache build
        uses: actions/cache@v3
        env:
          cache-name: mix-build-prod-v1
        with:
          path: _build
          key: ${{ runner.os }}-${{ steps.elixir.outputs.otp-version }}-${{ steps.elixir.outputs.elixir-version }}-${{ env.cache-name }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock'))}}

      - run: mix compile
      - run: mix assets.deploy
      - run: mix release --overwrite
      - run: tar -zcf til.tar.gz -C _build/prod/rel/til .

      - name: WireGuard
        uses: Hermanverschooten/wireguard@v0.0.01-alpha
        with:
          config: '${{ secrets.WIREGUARD }}'

      - name: Publish
        uses: Hermanverschooten/ssh-copy-command-action@v1
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SOURCE: "./til.tar.gz"
          REMOTE_HOST: '${{ secrets.DEPLOY_HOST }}'
          TARGET: '${{ secrets.DEPLOY_LOCATION }}'
          REMOTE_PORT:  '${{ secrets.DEPLOY_PORT }}'
          REMOTE_USER:  '${{ secrets.DEPLOY_USER }}'
          CMD: "./deploy"

